const int GAUSSIAN_SAMPLES = MACRO_GAUSSIAN_SAMPLES;

kernel vec4 filterKernel(sampler inputImage, vec2 texelOffset, float distanceNormalizationFactor) {

    float gaussianWeightFactors[(GAUSSIAN_SAMPLES + 1)/2];

    MACRO_SETUP_GAUSSIAN_WEIGHT_FACTORS

    vec2 blurCoordinates[GAUSSIAN_SAMPLES];

    int multiplier = 0;
    vec2 blurStep;
    for (int i = 0; i < GAUSSIAN_SAMPLES; i++) {
        multiplier = (i - ((GAUSSIAN_SAMPLES - 1) / 2));
        blurStep = float(multiplier) * texelOffset;
        blurCoordinates[i] = destCoord() + blurStep;
    }

    vec4 centralColor;
    float gaussianWeightTotal;
    vec4 sum;
    vec4 sampleColor;
    float distanceFromCentralColor;
    float gaussianWeight;

    int centralIndex = (GAUSSIAN_SAMPLES - 1)/2;

    centralColor = sample(inputImage,samplerTransform(inputImage, blurCoordinates[centralIndex]));
    gaussianWeightTotal = gaussianWeightFactors[0];
    sum = centralColor * gaussianWeightFactors[0];

    for (int i = 0; i < centralIndex; i++) {
        sampleColor = sample(inputImage,samplerTransform(inputImage, blurCoordinates[i]));
        distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);
        gaussianWeight = gaussianWeightFactors[centralIndex - i] * (1.0 - distanceFromCentralColor);
        gaussianWeightTotal += gaussianWeight;
        sum += sampleColor * gaussianWeight;
    }

    for (int i = centralIndex + 1; i < GAUSSIAN_SAMPLES; i++) {
        sampleColor = sample(inputImage,samplerTransform(inputImage, blurCoordinates[i]));
        distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);
        gaussianWeight = gaussianWeightFactors[i-centralIndex] * (1.0 - distanceFromCentralColor);
        gaussianWeightTotal += gaussianWeight;
        sum += sampleColor * gaussianWeight;
    }

    vec4 result = sum / gaussianWeightTotal;

    return result;
}
